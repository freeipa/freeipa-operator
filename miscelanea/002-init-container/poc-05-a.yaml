# Proof of Concept that launch ipa-server-install in an initContainer,
# preparing the whole data volume.
#
# Quick Start:
#   export APP=poc-05-a; make app-delete app-deploy get-info
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
data:
  DEBUG_TRACE: "2"
  IPA_SERVER_HOSTNAME: "poc-05-a.apps.permanent.idmocp.idm.lab.bos.redhat.com"
  # TODO Move PASSWORD into a Secret object
  PASSWORD: "Secret123"
  container: "podman"
  container_uuid: ""
  UID_BASE: ""
  GID_BASE: ""
  # yamllint disable rule:line-length
  init-uid-gid-base.sh: |
    #!/bin/bash
    function yield {
      echo "$*" >&2
    }
    function verbose {
      yield "$*"
      "$@"
    }
    echo "Script: $0"
    TOKEN="$(</var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    APP="poc-05-a"
    echo "NAMESPACE="
    oc login --token ""  \
             --certificate-authority="" \
             https://kubernetes.default.svc:443
    if [ "${UID_BASE}" == "" ]; then
      UID_BASE="$( oc get namespace/avisiedo-init-container \
                   -o 'jsonpath={.metadata.annotations.openshift\.io/sa\.scc\.uid-range}' )"
      UID_BASE="${UID_BASE%/*}"
      oc patch configmap ${APP} --patch "{\"data\":{\"UID_BASE\": \"${UID_BASE}\"}}"
    fi
    if [ "${GID_BASE}" == "" ]; then
      GID_BASE="$( oc get namespace/avisiedo-init-container \
                   -o 'jsonpath={.metadata.annotations.openshift\.io/sa\.scc\.supplemental-groups}' )"
      GID_BASE="${GID_BASE%/*}"
      oc patch configmap ${APP} \
         --patch "{\"data\":{\"GID_BASE\":\"${GID_BASE}\"}}"
    fi
    UID_BASE="$( oc get cm/${APP} -o 'jsonpath={.data.UID_BASE}' )"
    GID_BASE="$( oc get cm/${APP} -o 'jsonpath={.data.GID_BASE}' )"
    echo "configMap.data.UID_BASE=${UID_BASE}"
    echo "configMap.data.GID_BASE=${GID_BASE}"

  # yamllint disable rule:line-length
  init-container-uuid.sh: |
    #!/bin/bash
    function yield {
      echo "$*" >&2
    }
    function verbose {
      yield "$*"
      "$@"
    }
    echo "Script: $0"
    TOKEN="$(</var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    APP="poc-05-a"
    echo "NAMESPACE=${NAMESPACE}"
    oc login --token "${TOKEN}" \
             --certificate-authority="${CA_CERT}" \
             https://kubernetes.default.svc:443
    container_uuid="$( oc get configmap ${APP} -o 'jsonpath={.data.container_uuid}' )"
    if [ "${container_uuid}" == "" ]; then
      systemd-machine-id-setup
      container_uuid="$(</etc/machine-id)"
      oc patch configmap ${APP} \
         --patch "{\"data\":{\"container_uuid\": \"${container_uuid}\"}}"
    fi
    echo "configMap.data.container_uuid='$( oc get configmap ${APP} -o 'jsonpath={.data.container_uuid}' )'"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["list", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
subjects:
  - kind: ServiceAccount
    name: poc-05-a
roleRef:
  kind: Role
  name: poc-05-a
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
  annotations:
    openshift.io/scc: anyuid
spec:
  serviceAccountName: poc-05-a
  containers:
    - name: main
      image: docker.io/openshift/origin-cli:v4.0
      securityContext:
        privileged: true
        capabilities:
          add:
            - "SYS_ADMIN"
            - "SYS_RESOURCE"
            - "MKNOD"
            - "SYS_RAWIO"
            - "SETUID"
            - "SETGID"
            - "SETPCAP"
      command: ["/usr/sbin/init"]
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: UID_BASE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: UID_BASE
        - name: GID_BASE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: GID_BASE
      volumeMounts:
        - name: scripts
          mountPath: /opt/poc-05-a
  initContainers:
    - name: init-container-uuid
      image: docker.io/openshift/origin-cli:v4.0
      command: ["/opt/poc-05-a/init-container-uuid.sh"]
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: container_uuid
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: container_uuid
      volumeMounts:
        - name: scripts
          mountPath: /opt/poc-05-a

    - name: init-uid-gid-base
      image: docker.io/openshift/origin-cli:v4.0
      command: ["/opt/poc-05-a/init-uid-gid-base.sh"]
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: UID_BASE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: UID_BASE
        - name: GID_BASE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: GID_BASE
      volumeMounts:
        - name: scripts
          mountPath: /opt/poc-05-a

    - name: init-volume
      image: quay.io/avisied0/freeipa-openshift-container:dev-test
      imagePullPolicy: Always
      securityContext:
        privileged: true
        capabilities:
          add:
            - "SYS_ADMIN"
            - "SYS_RESOURCE"
            - "MKNOD"
            - "SYS_RAWIO"
            - "SETUID"
            - "SETGID"
            - "SETPCAP"
      command: ["/usr/sbin/init"]
      args:
        - exit-on-finished
        - -U
        # - --hostname
        # - ipa.example.test
        - --realm
        - EXAMPLE.TEST
        - --no-ntp
        - --no-sshd
        - --no-ssh
        - --verbose
      env:
        # - name: SYSTEMD_OPTS
        #   value: "--show-status=true --unit=ipa-server-configure-first.service"
        - name: INIT_WRAPPER
          value: "1"
        - name: DEBUG_TRACE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: DEBUG_TRACE
        - name: PASSWORD
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: PASSWORD
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: UID_BASE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: UID_BASE
        - name: GID_BASE
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: GID_BASE
        - name: IPA_SERVER_HOSTNAME
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: IPA_SERVER_HOSTNAME
        - name: container_uuid
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: container_uuid
        # - name: IPA_SERVER_IP
        #   valueFrom:
        #     fieldRef:
        #       fieldPath: status.podIP

        - name: container
          valueFrom:
            configMapKeyRef:
              name: poc-05-a
              key: container
        - name: SYSTEMD_OFFLINE
          value: "1"
        - name: SYSTEMD_NSPAWN_API_VFS_WRITABLE
          value: "network"

      volumeMounts:
        - name: data
          mountPath: /data

  volumes:
    - name: data
      emptyDir: {}
    - name: scripts
      configMap:
        name: poc-05-a
        items:
          - key: "init-container-uuid.sh"
            path: "init-container-uuid.sh"
            mode: 0777
          - key: "init-uid-gid-base.sh"
            path: "init-uid-gid-base.sh"
            mode: 0777
