# Proof of Concept for initializing container_uuid which is used to regenerate
# the /etc/machine-id file content.
#
# Quick Start:
#   export APP=poc-04; make app-delete app-deploy; sleep 5; make get-info
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: poc-04
  labels:
    app: poc-04
data:
  container_uuid: ""
  # yamllint disable rule:line-length
  init-container-uuid.sh: |
    #!/bin/bash
    function yield {
      echo "$*" >&2
    }
    function verbose {
      yield "$*"
      "$@"
    }
    echo "Script: $0"
    TOKEN="$(</var/run/secrets/kubernetes.io/serviceaccount/token)"
    CA_CERT="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
    APP="poc-04"
    echo "NAMESPACE=${NAMESPACE}"
    oc login --token "${TOKEN}" \
             --certificate-authority="${CA_CERT}" \
             https://kubernetes.default.svc:443
    container_uuid="$( oc get configmap ${APP} -o 'jsonpath={.data.container_uuid}' )"
    if [ "${container_uuid}" == "" ]; then
      systemd-machine-id-setup
      container_uuid="$(</etc/machine-id)"
      oc patch configmap ${APP} \
         --patch "{\"data\":{\"container_uuid\": \"${container_uuid}\"}}"
    fi
    echo "configMap.data.container_uuid='$( oc get configmap ${APP} -o 'jsonpath={.data.container_uuid}' )'"
  main.sh: |
    #!/bin/sh
    echo "Script: $0"
    echo "NAMESPACE=${NAMESPACE}"
    echo "container_uuid='${container_uuid}'"
    while true; do sleep 1; done
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: poc-04
  labels:
    app: poc-04
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: poc-04
  labels:
    app: poc-04
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["list", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: poc-04
  labels:
    app: poc-04
subjects:
  - kind: ServiceAccount
    name: poc-04
roleRef:
  kind: Role
  name: poc-04
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Pod
metadata:
  name: poc-04
  labels:
    app: poc-04
spec:
  serviceAccountName: poc-04
  containers:
    - name: main
      image: docker.io/openshift/origin-cli:v4.0
      command: ["/opt/poc-04/main.sh"]
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: container_uuid
          valueFrom:
            configMapKeyRef:
              name: poc-04
              key: container_uuid
      volumeMounts:
        - name: scripts
          mountPath: /opt/poc-04
  initContainers:
    - name: init-container-uuid
      image: docker.io/openshift/origin-cli:v4.0
      command: ["/opt/poc-04/init-container-uuid.sh"]
      env:
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: container_uuid
          valueFrom:
            configMapKeyRef:
              name: poc-04
              key: container_uuid
      volumeMounts:
        - name: scripts
          mountPath: /opt/poc-04
  volumes:
    - name: scripts
      configMap:
        name: poc-04
        items:
          - key: "init-container-uuid.sh"
            path: "init-container-uuid.sh"
            mode: 0777
          - key: "main.sh"
            path: "main.sh"
            mode: 0777
