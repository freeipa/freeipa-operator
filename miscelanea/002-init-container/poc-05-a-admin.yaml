---
# https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
  annotations:
    kubernetes.io/description: poc-05-a provides all features of the
      restricted SCC but allows users to run with any UID and any GID.
    release.openshift.io/create-only: "true"
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities: null
# allowedCapabilities:
# - '*'
allowedUnsafeSysctls:
  - '*'
defaultAddCapabilities: null
fsGroup:
  type: RunAsAny
priority: 10
readOnlyRootFilesystem: false
requiredDropCapabilities:
  - MKNOD
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users:
  - system:serviceaccount:avisiedo-init-container:poc-05-a
# groups:
#   - system:cluster-admins
volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - projected
  - secret
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
automountServiceAccountToken: true
# ---
# https://kubernetes.io/docs/concepts/security/pod-security-standards/#what-s-the-difference-between-a-security-policy-and-a-security-context
# https://kubernetes.io/docs/concepts/policy/pod-security-policy/#create-a-policy-and-a-pod
# apiVersion: policy/v1beta1
# kind: PodSecurityPolicy
# metadata:
#   name: poc-05-a
#   labels:
#     app: poc-05-a
# spec:
#   privileged: false  # Don't allow privileged pods!
#   seLinux:
#     rule: RunAsAny
#   supplementalGroups:
#     rule: RunAsAny
#   runAsUser:
#     rule: RunAsAny
#   fsGroup:
#     rule: RunAsAny
#   volumes:
#     - configMap
#     - downwardAPI
#     - emptyDir
#     - persistentVolumeClaim
#     - projected
#     - secret
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["list", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
subjects:
  - kind: ServiceAccount
    name: poc-05-a
roleRef:
  kind: Role
  name: poc-05-a
  apiGroup: rbac.authorization.k8s.io
---
# create a new ClusterRole (since SCCâ€™s are cluster scoped instead of namespace
# scoped) that will provide access to a given SCC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
rules:
  - apiGroups:
      - security.openshift.io
    resources:
      - securitycontextconstraints
    resourceNames:
      - poc-05-a
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: poc-05-a
  labels:
    app: poc-05-a
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: poc-05-a
subjects:
  - kind: ServiceAccount
    name: poc-05-a
    namespace: avisiedo-init-container
