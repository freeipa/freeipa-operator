# This Proof of Concept define a Route, Service and Pod that
# service an http service using nginx and inject a demo page
# just to double check potential configurations for Freeipa
# deployment.
#
# Here the traffic is redirected to the cluster by using
# an externalName. This require to register the DNS entry
# in an external DNS service (/etc/hosts is enough for testing
# purposes).
#
# Quick start:
#   export APP=poc-05-c
#   make app-delete app-deploy get-info
#
---
kind: Service
apiVersion: v1
metadata:
  name: poc-05-c
  labels:
    app: poc-05-c
spec:
  type: ExternalName
  # externalName: poc-05-c.apps.permanent.idmocp.lab.eng.rdu2.redhat.com
  externalName: poc-05-c.example.com
  selector:
    app: poc-05-c
  # publishNotReadyAddress: true
  ports:
    - name: https-tcp
      port: 443
      protocol: TCP
      targetPort: 80
---
kind: Route
apiVersion: v1
metadata:
  annotations:
    # yamllint disable rule:line-length
    haproxy.router.openshift.io/hsts_header: max-age=31536000;includeSubDomains;preload
  name: poc-05-c
  labels:
    app: poc-05-c
spec:
  # host: poc-05-c.apps.permanent.idmocp.lab.eng.rdu2.redhat.com
  host: poc-05-c.example.com
  to:
    kind: Service
    name: poc-05-c
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Allow
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: poc-05-c
  labels:
    app: poc-05-c
data:
  gitlab-demo-init.sh: |
    #!/bin/bash
    virtualenv .venv
    source .venv/bin/activate
    pip install -r requirements.txt

  main.sh: |
    #!/bin/bash
    source .venv/bin/activate
    python gitlab-demo.py

  gitlab-demo.py: |
    #!/usr/bin/python3
    from time import sleep

    import gitlab

    gl = gitlab.Gitlab('https://gitlab.cee.redhat.com', private_token='dklsfjksldjfkdsjf', api_version=4)
    gl.auth()

    project = gl.projects.get('path/to/project')
    items = project.repository_tree()

    print(items)

    while true:
      sleep(1)

  requirements.txt: |
    python-gitlab>=2.5.0,<2.6.0


---
kind: Pod
apiVersion: v1
metadata:
  name: poc-05-c
  labels:
    app: poc-05-c
spec:
  containers:
    - name: main
      # https://hub.docker.com/_/nginx?tab=description
      image: docker.io/nginx:stable
      volumeMounts:
        - mountPath: /usr/share/nginx/html
          name: web-content
      ports:
        - containerPort: 80
          protocol: TCP
          name: http-tcp
  initContainers:
    - name: prepare
      image: docker.io/hello-world:latest
  volumes:
    - name: web-content
      configMap:
        defaultMode: 0444
        name: poc-05-c
        optional: false
        items:
          - key: index.html
            path: index.html
    - name: web-config
      configMap:
        defaultMode: 0444
        name: poc-05-c
        optional: false
        items:
          - key: nginx.conf
            path: nginx.conf
