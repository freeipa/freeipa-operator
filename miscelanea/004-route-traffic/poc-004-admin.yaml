---
# https://docs.openshift.com/container-platform/4.5/authentication/managing-security-context-constraints.html
# https://kubernetes-security.info/
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: poc-004
  labels:
    app: poc-004
  annotations:
    kubernetes.io/description: poc-004 provides all features of the
      restricted SCC but allows users to run with any UID and any GID.
    release.openshift.io/create-only: "true"
allowHostDirVolumePlugin: true
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: true
allowPrivilegedContainer: false
allowedCapabilities:
  # Default capabilities anyuid
  - "SETUID"
  - "SETGID"
  - "FSETID"
  - "SETPCAP"
  - "DAC_OVERRIDE"
  - "NET_RAW"
  - "NET_BIND_SERVICE"
  - "SYS_CHROOT"
  - "KILL"
  - "AUDIT_WRITE"
  - "CHOWN"
  - "FOWNER"
  - "SETFCAP"

  # No default capabilities
  - "SYS_ADMIN"
  - "SYS_RESOURCE"
  - "MKNOD"
allowedUnsafeSysctls:
defaultAddCapabilities:
  # Default capabilities anyuid
  - "CHOWN"
  - "FOWNER"
  - "SETFCAP"

  - "SETPCAP"
  - "SETFCAP"
  - "SETUID"
  - "SETGID"
  - "DAC_OVERRIDE"
  - "NET_BIND_SERVICE"
  - "KILL"

  # No default capabilities
  - "SYS_ADMIN"
  - "SYS_RESOURCE"
  - "MKNOD"
fsGroup:
  type: RunAsAny
priority: 20
readOnlyRootFilesystem: false
requiredDropCapabilities: null
runAsUser:
  type: RunAsAny
seLinuxContext:
  type: MustRunAs
supplementalGroups:
  type: RunAsAny
users:
  - system:serviceaccount:avisiedo-004-route-traffic:poc-004
volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - projected
  - secret
  - hostPath
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: poc-004
  labels:
    app: poc-004
automountServiceAccountToken: true
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: poc-004
  labels:
    app: poc-004
rules:
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["list", "get", "watch"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["list", "get"]
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["list", "get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: poc-004
  labels:
    app: poc-004
subjects:
  - kind: ServiceAccount
    name: poc-004
roleRef:
  kind: Role
  name: poc-004
  apiGroup: rbac.authorization.k8s.io
---
# create a new ClusterRole (since SCCâ€™s are cluster scoped instead of namespace
# scoped) that will provide access to a given SCC
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: poc-004
  labels:
    app: poc-004
rules:
  - apiGroups:
      - security.openshift.io
    resources:
      - securitycontextconstraints
    resourceNames:
      - poc-004
    verbs:
      - use
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: poc-004
  labels:
    app: poc-004
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: poc-004
subjects:
  - kind: ServiceAccount
    name: poc-004
    namespace: avisiedo-init-container
