---
# Predefined variables for github:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables

# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#name
name: Main

# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#on
# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
# yamllint disable-line rule:truthy
on:
  push:
  pull_request:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # 22:00 UTC+2 is translated to 20:00 UTC+0
    - cron: '00 20 * * *'

# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobs
jobs:
  environment:
    name: Gather information about the environment
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Gather environment information
        env:
          IMG_BASE: "${{ secrets.IMG_BASE }}"
        run: |
          env
          go env
          go version

  lint-golang:
    name: Lint golang code
    needs: [environment]

    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-20.04

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      - uses: actions/checkout@v2

      - name: Lint go files
        run: |
          [ "$GOPATH" != "" ] || export GOPATH="$( go env GOPATH )"
          go get -u golang.org/x/lint/golint
          make lint

  lint-extra-files:
    name: Lint extra files in the repository
    needs: [environment]

    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-20.04

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      - uses: actions/checkout@v2

      - name: Lint Shell Script files
        run: ./devel/lint.sh  $( find . -name '*.sh' )
      - name: Lint Markdown files
        run: ./devel/lint.sh  $( find . -name '*.md' )
      - name: Lint YAML files
        run: ./devel/lint.sh  $( find . -name '*.yml' -o -name '*.yaml' )
      - name: Lint Dockerfile files
        run: |
          ./devel/lint.sh  $( find . -name 'Dockerfile' \
          -o -name 'Dockerfile.*' )

  build:
    name: Build stage
    needs: [lint-golang, lint-extra-files]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@master
        with:
          go-version: 1.14
        id: go

      - name: Clean container objects
        run: |
          docker image prune --force
          docker container prune --force

      - name: Install dependencies
        env:
          # yamllint disable-line rule:line-length
          INSTALL_KUSTOMIZE_URL: "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"
          # yamllint disable-line rule:line-length
          OPERATOR_SDK_URL: "https://github.com/operator-framework/operator-sdk/releases/download/v1.0.0/operator-sdk-v1.0.0-x86_64-linux-gnu"
          GO111MODULE: "on"
        run: |
          curl -s "${INSTALL_KUSTOMIZE_URL}" | bash
          go install -i
          go get golang.org/x/lint/golint
          go get github.com/kisielk/errcheck
          go get github.com/golangci/golangci-lint/cmd/golangci-lint@v1.30.0
          # GO111MODULE=off go get -v github.com/wagoodman/dive

      # https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
      - name: Build
        env:
          GO111MODULE: "on"
          IMG_BASE: "${{ secrets.IMG_BASE }}"
          DOCKER_AUTH: "${{ secrets.DOCKER_AUTH }}"
        run: |
          export PATH=$PATH:$(go env GOPATH)/bin
          export TAG="${GITHUB_SHA}"
          export CONTAINER_IMAGE_FILE="${IMG_BASE##*/}.tar"
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]
          then
            export IMG_BASE="local/freeipa-operator"
          elif [ "${GITHUB_EVENT_NAME}" == "schedule" ]
          then
            export TAG="nightly"
          fi
          export IMG="${IMG_BASE}:${TAG}"

          echo ">>> Building operator binary"
          make generate
          go build -o bin/manager main.go

          echo ">>> Building container image"
          make container-build

          echo ">>> Saving docker-archive"
          make container-save

          echo ">>> Checking image layer sizes"
          make dive

          # The container image will not be pushed when building on a PR,
          # because the secrets are not accessible from the PR (for
          # security reasons), which make not possible to login into the
          # container image registry.
          if [ "$GITHUB_EVENT_NAME" != "pull_request" ]
          then
            echo ">>> Pushing container image"
            DOCKER_REGISTRY="${IMG_BASE%%/*}"
            [ -e "${HOME}/.docker" ] || mkdir -p "${HOME}/.docker"
            cat > "$HOME/.docker/config.json" <<< "${DOCKER_AUTH}"
            docker login "${DOCKER_REGISTRY}"
            # rm is not accidental here; it is removed if the push
            # was successful, to avoid it is stored as an artefact
            # in github.
            make container-push \
            && rm -vf ${CONTAINER_IMAGE_FILE}.gz
          fi

      - uses: actions/upload-artifact@v2
        with:
          name: freeipa-operator-${{ github.sha }}.tar
          path: freeipa-operator.tar

      - uses: actions/upload-artifact@v2
        with:
          name: manager-${{ github.sha }}
          path: bin
