---
# Predefined variables for github:
# https://docs.github.com/en/free-pro-team@latest/actions/reference/environment-variables#default-environment-variables

# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#name
name: Main

# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#on
# https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows
# yamllint disable-line rule:truthy
on:
  push:
  pull_request:
  schedule:
    # * is a special character in YAML so you have to quote this string
    # 22:00 UTC+2 is translated to 20:00 UTC+0
    - cron: '00 20 * * *'

# https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobs
jobs:
  environment:
    name: Gather information and prepare
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2

      - name: Prepare environment variables
        run: |
          if [ "${{ github.repository }}" != "freeipa/freeipa-operator" ]; then
            if [ "${{ secrets.ENV }}" == "" ]; then
              echo "ERROR:You need to define ENV secret with your environment."
              echo "INFO:See DEVOPS.md file for further information"
              cat DEVOPS.md
              exit 1
            else
              [ -e "bin" ] || mkdir bin
              cat > env.ci <<EOF
          ${{ secrets.ENV }}
          EOF
            fi
          else
            cp -vf build/ci/env env.ci
          fi
          [ -e "bin" ] || mkdir bin
          [ -e "testbin" ] || mkdir testbin
          [ -e "~/.cache/go-build" ] || mkdir -p ~/.cache/go-build
          [ -e "~/go/pkg/mod" ] || mkdir -p ~/go/pkg/mod

      # yamllint disable-line rule:line-length
      - run: env -i bash -c 'set -a; source env.ci; env --unset=PWD --unset=SHLVL --unset=_' >> "$GITHUB_ENV"
      - uses: actions/upload-artifact@v3
        with:
          name: env
          path: env.ci

      - uses: actions/cache@v3
        with:
          path: |
            bin
            testbin
            .venv
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'requirements-dev.txt', 'mk/tools.mk') }}
      - run: make .venv

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
        id: go

      - run: make controller-gen envtest kustomize "${PWD}/bin/dive"

      - name: Gather environment information
        run: |
          env
          go env
          go version
          python --version
          ./bin/controller-gen --version

      - name: Available disk space
        run: df -H

  lint-golang:
    name: Lint golang code
    needs: [environment]

    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-20.04

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
        id: go
      - uses: actions/setup-python@v3
      - uses: actions/cache@v3
        with:
          path: |
            bin
            testbin
            .venv
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'requirements-dev.txt', 'mk/tools.mk') }}

      - uses: actions/download-artifact@v3
        with:
          name: env
      # yamllint disable-line rule:line-length
      - run: env -i bash -c 'set -a; source env.ci; env --unset=PWD --unset=SHLVL --unset=_' >> "$GITHUB_ENV"

      - name: Lint go files
        run: |
          [ "$GOPATH" != "" ] || export GOPATH="$( go env GOPATH )"
          go get -u golang.org/x/lint/golint
          pip install -r requirements-dev.txt
          make lint

  lint-extra-files:
    name: Lint extra files in the repository
    needs: [environment]

    # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on
    runs-on: ubuntu-20.04

    # https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idsteps
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
        id: go
      - uses: actions/setup-python@v3
      - uses: actions/cache@v3
        with:
          path: |
            bin
            testbin
            .venv
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'requirements-dev.txt', 'mk/tools.mk') }}

      - uses: actions/download-artifact@v3
        with:
          name: env
      # yamllint disable-line rule:line-length
      - run: env -i bash -c 'set -a; source env.ci; env --unset=PWD --unset=SHLVL --unset=_' >> "$GITHUB_ENV"

      - name: Lint Shell Script files
        run: ./devel/lint.sh  $( find . -name '*.sh' )
      - name: Lint Markdown files
        run: ./devel/lint.sh  $( find . -name '*.md' )
      - name: Lint YAML files
        run: ./devel/lint.sh  $( find . -name '*.yml' -o -name '*.yaml' )
      - name: Lint Dockerfile files
        run: |
          ./devel/lint.sh  $( find . -name 'Dockerfile' \
          -o -name 'Dockerfile.*' )

  lint-manifests:
    name: Lint Kubernetes objects
    needs: [environment]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
        id: go
      - uses: actions/setup-python@v3
      - uses: actions/cache@v3
        with:
          path: |
            bin
            testbin
            .venv
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'requirements-dev.txt', 'mk/tools.mk') }}

      - uses: actions/download-artifact@v3
        with:
          name: env
      # yamllint disable-line rule:line-length
      - run: source env.ci; grep -v -e ^\# -e ^\$ env.ci | while read -r LINE; do printf "%s\n" "${LINE}"; done >> "${GITHUB_ENV}"

      - name: Lint Kustomize files
        continue-on-error: true
        run: |-
          ./devel/generate-checkov-report.sh \
          | sed 's/\x1b[[0-9;]*[a-zA-Z]//g' \
          | tee checkov-report.txt

      - uses: actions/upload-artifact@v2
        with:
          name: checkov-report.txt
          path: checkov-report.txt

  build:
    name: Build stage
    needs: [lint-golang, lint-extra-files, lint-manifests]

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v2
        with:
          go-version: '1.16'
        id: go
      - uses: actions/setup-python@v3
      - uses: actions/cache@v3
        with:
          path: |
            bin
            testbin
            .venv
          # yamllint disable-line rule:line-length
          key: ${{ runner.os }}-bin-${{ hashFiles('Makefile', 'requirements-dev.txt', 'mk/tools.mk') }}

      - uses: actions/download-artifact@v3
        with:
          name: env
      # yamllint disable-line rule:line-length
      - run: env -i bash -c 'set -a; source env.ci; env --unset=PWD --unset=SHLVL --unset=_' >> "$GITHUB_ENV"

      - name: Clean docker infrastructure
        run: |
          docker image prune --force
          docker system prune --force

      # https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets#using-encrypted-secrets-in-a-workflow
      - name: Build
        env:
          DOCKER_AUTH: "${{ secrets.DOCKER_AUTH }}"
        run: |-
          export PATH=$PATH:$(go env GOPATH)/bin
          export TAG="${GITHUB_SHA}"
          export CONTAINER_IMAGE_FILE="${IMAGE_TAG_BASE##*/}.tar"
          if [ "$GITHUB_EVENT_NAME" == "pull_request" ]
          then
            export IMAGE_TAG_BASE="local/freeipa-operator"
          elif [ "${GITHUB_EVENT_NAME}" == "schedule" ]
          then
            export TAG="nightly"
          fi
          export IMG="${IMAGE_TAG_BASE}:${TAG}"

          echo ">>> Launch tests"
          # Integration tests are disable in github actions
          make test

          echo ">>> Building container image"
          make docker-build

          echo ">>> Checking image layer sizes"
          make dive IMG="${IMG}"

          # The container image will not be pushed when building on a PR,
          # because the secrets are not accessible from the PR (for
          # security reasons), which make not possible to login into the
          # container image registry.
          if [ "$GITHUB_EVENT_NAME" != "pull_request" ]
          then
            echo ">>> Pushing container image"
            DOCKER_REGISTRY="${IMAGE_TAG_BASE%%/*}"
            [ -e "${HOME}/.docker" ] || mkdir -p "${HOME}/.docker"
            cat > "$HOME/.docker/config.json" <<< "${DOCKER_AUTH}"
            docker login "${DOCKER_REGISTRY}"
            # rm is not accidental here; it is removed if the push
            # was successful, to avoid it is stored as an artefact
            # in github.
            make docker-push \
            && rm -vf "${CONTAINER_IMAGE_FILE}"
          fi

      - uses: actions/upload-artifact@v2
        with:
          name: freeipa-operator-${{ github.sha }}.tar
          path: freeipa-operator.tar

      - uses: actions/upload-artifact@v2
        with:
          name: manager-${{ github.sha }}
          path: bin
